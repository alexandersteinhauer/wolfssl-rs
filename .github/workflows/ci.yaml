name: CI
on:
  push:
    branches: [main]
  pull_request: null # target every PR

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress:  ${{ github.ref_name != 'main' }}

env:
  RUST_VERSION: 1.85.0

jobs:
  ci:
    needs: [earthly, coverage, build-ios, build-tvos]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - shell: bash
        run: |
          [[ $(echo '${{ toJSON(needs) }}' | jq 'map(select(.result != "success")) | length == 0') == 'true' ]] || exit 1
  earthly:
    strategy:
      fail-fast: false
      matrix:
        target: [run-tests, build-release, fmt, lint, check-dependencies, build-android-release]
    runs-on: ubuntu-latest
    env:
      EARTHLY_TOKEN: "${{ secrets.EARTHLY_TOKEN }}"
      FORCE_COLOR: 1
    steps:
      - uses: earthly/actions-setup@v1
        with:
          version: v0.8.3
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set satellite if earthly creds are available
        shell: bash
        run: |
          if [[ ! -z "${EARTHLY_TOKEN}" ]]; then
            echo "EARTHLY_SATELLITE=--org expressvpn --satellite wolfssl-rs" >> $GITHUB_ENV
          fi
      - name: Run +${{ matrix.target }} on Earthly satellite
        run: earthly --ci ${EARTHLY_SATELLITE} +${{ matrix.target }}
  coverage:
    runs-on: ubuntu-latest
    env:
      EARTHLY_TOKEN: "${{ secrets.EARTHLY_TOKEN }}"
      FORCE_COLOR: 1
    steps:
      - uses: earthly/actions-setup@v1
        with:
          version: v0.8.3
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set satellite if earthly creds are available
        shell: bash
        run: |
          if [[ ! -z "${EARTHLY_TOKEN}" ]]; then
            echo "EARTHLY_SATELLITE=--org expressvpn --satellite wolfssl-rs" >> $GITHUB_ENV
          fi
      - name: Run +run-coverage on Earthly
        id: coverage
        run: |
          earthly --ci ${EARTHLY_SATELLITE} --artifact +run-coverage/* output/

          cat output/summary.txt

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "summary<<$EOF"    >> "$GITHUB_OUTPUT"
          cat output/summary.txt  >> "$GITHUB_OUTPUT"
          echo ""                 >> "$GITHUB_OUTPUT"
          echo "$EOF"             >> "$GITHUB_OUTPUT"
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: output/html
          if-no-files-found: error
      - name: Check coverage
        id: coverage-check
        run: |
          REGIONS_SOFT_THRESHOLD=50
          REGIONS_HARD_THRESHOLD=40
          LINES_SOFT_THRESHOLD=65
          LINES_HARD_THRESHOLD=60

          regions_coverage=$(jq '.data[].totals.regions.percent | floor' output/coverage.json)
          lines_coverage=$(jq '.data[].totals.lines.percent | floor' output/coverage.json)

          echo "Regions: $regions_coverage% (soft: $REGIONS_SOFT_THRESHOLD%, hard: $REGIONS_HARD_THRESHOLD%)"
          echo "Lines: $lines_coverage% (soft: $LINES_SOFT_THRESHOLD%, hard: $LINES_HARD_THRESHOLD%)"

          FAILED=false

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "text<<$EOF" >> "$GITHUB_OUTPUT"

          if [[ $regions_coverage -lt $REGIONS_HARD_THRESHOLD ]] ; then
              echo ":x: Region coverage $regions_coverage% below hard threshold $REGIONS_HARD_THRESHOLD%" >> "$GITHUB_OUTPUT"
              FAILED=true
          elif [[ $regions_coverage -lt $REGIONS_SOFT_THRESHOLD ]] ; then
              echo ":warning: Region coverage $regions_coverage% below soft threshold $REGIONS_SOFT_THRESHOLD%" >> "$GITHUB_OUTPUT"
          else
              echo ":white_check_mark: Region coverage $regions_coverage% passes" >> "$GITHUB_OUTPUT"
          fi

          if [[ $lines_coverage -lt $LINES_HARD_THRESHOLD ]] ; then
              echo ":x: Line coverage $lines_coverage% below hard threshold $LINES_HARD_THRESHOLD%" >> "$GITHUB_OUTPUT"
              FAILED=true
          elif [[ $lines_coverage -lt $LINES_SOFT_THRESHOLD ]] ; then
              echo ":warning: Line coverage $lines_coverage% below soft threshold $LINES_SOFT_THRESHOLD%" >> "$GITHUB_OUTPUT"
          else
              echo ":white_check_mark: Line coverage $lines_coverage% passes" >> "$GITHUB_OUTPUT"
          fi

          echo "$EOF" >> "$GITHUB_OUTPUT"

          echo "Setting output: failed: $FAILED"
          echo "failed=$FAILED" >> "$GITHUB_OUTPUT"

      - uses: jwalton/gh-find-current-pr@v1
        id: find-pr
        with:
          state: open
      - name: Find Coverage Comment
        if: steps.find-pr.outputs.number
        uses: peter-evans/find-comment@v3
        id: coverage-comment
        with:
          issue-number: ${{ steps.find-pr.outputs.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Code coverage summary'
      - name: Create or update comment
        if: steps.find-pr.outputs.number
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.coverage-comment.outputs.comment-id }}
          issue-number: ${{ steps.find-pr.outputs.number }}
          body: |
            [Code coverage summary](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for ${{ github.sha }}:
            ```
            ${{ steps.coverage.outputs.summary }}
            ```
            ${{ steps.coverage-check.outputs.text }}
          edit-mode: replace
      - name: Coverage check fails
        if: steps.coverage-check.outputs.failed == 'true'
        run: exit 1
  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install automake
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool
      - name: Fetch WolfSSL
        run: git submodule update --init
      - name: Update Rust version
        run: | 
              rustup install $RUST_VERSION
              rustup default $RUST_VERSION
      - name: Install iOS platform targets
        run: rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios
      - name: Build on iOS
        run: IPHONEOS_DEPLOYMENT_TARGET=15.0 cargo build --release --target aarch64-apple-ios -v -v
      - name: Build on iOS Sim
        run: IPHONEOS_DEPLOYMENT_TARGET=15.0 cargo build --release --target aarch64-apple-ios-sim --target x86_64-apple-ios -v -v
  build-tvos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install automake
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install autoconf automake libtool
      - name: Fetch WolfSSL
        run: git submodule update --init
      # We would need to build the tvOS with nightly feature (-Zbuild-std) as `aarch64-apple-tvos` is a tier 3 target and does not support building host tools.
      # Since it forces us to use nightly toolchain, we download the nightly for $RUST_VERSION on the specific archieve date from https://github.com/oxalica/rust-overlay/tree/master/manifests/nightly/2025
      - name: Setup Rust toolchain for nightly feature
        run: |
              rustup toolchain install nightly-2025-01-03
              rustup component add rust-src --toolchain nightly-2025-01-03-aarch64-apple-darwin
      - name: Build on tvOS
        run: TVOS_DEPLOYMENT_TARGET=17.0 cargo +nightly-2025-01-03 build -Zbuild-std --release --target aarch64-apple-tvos -v -v
      - name: Build on tvOS Sim
        run: TVOS_DEPLOYMENT_TARGET=17.0 cargo +nightly-2025-01-03 build -Zbuild-std --release --target aarch64-apple-tvos-sim -v -v

